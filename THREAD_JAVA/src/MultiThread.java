/**
 * Multi Thread 이용한 방식
 * 
 * Multi Thread 이용한 경우 Single Thread를 이용했을 때에 비해 쓰레드 간의 작업전환시간이 추가된다
 * 또 먼저 작업이 끝난 쓰레드가 다른 쓰레드의 출력이 끝나기를 기다리는 대기시간도 추가된다
 *
 * 쓰레드의 불확실성
 * 싱글 코어의 경우 두개 이상의 쓰레드의 작업이 겹치는 부분이 없지만 그 외에는 쓰레드 작업이 겹치는 경우 존재할 수 있다
 * 또 같은 작업을 반복하더라도 실행 시간이 매번 동일하지 않다
 */

/** @출력
 * ----------------------------------------------------------------------------------------------------------------------
 * ----------------------------------------------------------------------------------------------||||||||||||||||||||||||
 * ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
 * ----------------------------||||||||||||----------------|||||||||||||||||||||-----------------------------------------
 * ---||소요시간 1 : 24
 * ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
 * |||||소요시간 2 : 25
 */
public class MultiThread {
    static long startTime = 0;

    public static void main(String args[]) {

        MultiThread2 th1 = new MultiThread2();
        th1.start();
        startTime = System.currentTimeMillis();

        for(int i = 0; i < 300; i++){
            System.out.printf("%s",new String("-"));    
        }

        System.out.println("소요시간 1 : " + (System.currentTimeMillis() - MultiThread.startTime));
    }
}

class MultiThread2 extends Thread {
    public void run() {
        for(int i = 0; i < 300; i++){
            System.out.printf("%s",new String("|"));
        }

        System.out.println("소요시간 2 : " + (System.currentTimeMillis() - MultiThread.startTime));
    }
}
